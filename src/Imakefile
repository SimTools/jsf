/************************************************************************/
/*									*/
/* Imakefile to build JSF libraries and application			*/
/*									*/
/* (Update)								*/
/*  4-Feb-2000 A.Miyamoto Include libJSFDMatrix, create shared library  */
/*          								*/
/*$Id$
/*       								*/
/************************************************************************/

/*----------------------------------------------------------------------*/
/*  Some macros specific to jsf	building				*/
/*----------------------------------------------------------------------*/

#include    "config/lclib.tmpl"
#include    "../conf/makejsf.tmpl"

#ifdef __LCLIBRAN_USE_RANMAR__
CERNLIBS      = -L$(CERN_ROOT)/lib -ljetset74 -lpacklib -lmathlib
#else
CERNLIBS      = -L$(CERN_ROOT)/lib -ljetset74 -lpacklib
#endif

#if defined(MacOSXArchitecture) || defined(DarwinArchitecture)
ROOTLIBS     += -lEGPythia -lEG $(CERNLIBS)
#else
ROOTLIBS     += -lEGPythia -lEG -Wl,-u,pytest_ $(CERNLIBS)
#endif

LCLIBDIR      = $(LCLIBROOT)/lib

#ifdef hitachiArchitecture
EXTRALDOPT = -Wl,-a,default 
#endif

ANALLIB = -L$(LCLIBDIR) $(EXTRALDOPT) -lGENUTIL -lLUHADR -lTAUOLA \
        -lSIMJLC -lLTKCL -lLCFULL -lBASESV5.1 -lTBS \
        -lHELASV204 -lFORTLIB -lCOM -lCLI \
        $(EXTRALIBS)

EXTRADEFINES = -I$(LCLIBROOT)/simjlc/src -I$(LCLIBROOT)/util/fortlib/src 

INC           = ../include 

/*----------------------------------------------------------------------*/
/*  Source files, headers, and objects to build				*/
/*----------------------------------------------------------------------*/

SRCJSF        = JSFSteer.$(SrcSuf) JSFModule.$(SrcSuf) \
		JSFDBS.$(SrcSuf) JSFUtil.$(SrcSuf) \
		JSFEnv.$(SrcSuf) 

SRCJSFLCFULL  = JSFBases.$(SrcSuf) \
		JSFSpringParton.$(SrcSuf) JSFSpring.$(SrcSuf) \
		JSFReadParton.$(SrcSuf) \
		JSFGeneratorParticle.$(SrcSuf) JSFGenerator.$(SrcSuf) \
		JSFFULLGenerator.$(SrcSuf) JSFHadronizer.$(SrcSuf) \
		JSFLCFULL.$(SrcSuf) \
		JSFReadGenerator.$(SrcSuf) \
		DebugGenerator.$(SrcSuf) DebugWGenerator.$(SrcSuf) \
		PythiaGenerator.$(SrcSuf) 

SRCJSFQUICKSIM= JSFQuickSimParam.$(SrcSuf) JSFQuickSim.$(SrcSuf) \
		JSFLTKCLTrack.$(SrcSuf) JSFSIMDST.$(SrcSuf) \
		JSFVTXHit.$(SrcSuf) JSFCALHit.$(SrcSuf) \
		JSFHelicalTrack.$(SrcSuf) JSFCDCTrack.$(SrcSuf) \
		JSFVirtualFit.$(SrcSuf) JSFGeoCFit.$(SrcSuf) \
		JSFVertexing.$(SrcSuf) JSFMergeEvent.$(SrcSuf)

#if __ROOT_FULLVERSION__ < 30000
SRCJSFDMATRIX = JSFDMatrix.$(SrcSuf) JSFDMatrixUtils.$(SrcSuf) \
		JSFDVector.$(SrcSuf)
#endif

SRC	      = $(SRCJSF) $(SRCJSFLCFULL) $(SRCJSFQUICKSIM) \
		$(SRCJSFDMATRIX) $(SRCJSFBASES)

OBJJSF        = $(subst .$(SrcSuf),.$(ObjSuf),$(SRCJSF)) \
		libJSF.$(ObjSuf)

OBJJSFLCFULL  = $(subst .$(SrcSuf),.$(ObjSuf),$(SRCJSFLCFULL)) \
		readgenutil.o readparton.o \
		libJSFLCFULL.$(ObjSuf)

OBJJSFQUICKSIM= $(subst .$(SrcSuf),.$(ObjSuf),$(SRCJSFQUICKSIM)) \
		simdstutil.o \
		libJSFQuickSim.$(ObjSuf)

#if __ROOT_FULLVERSION__ < 30000
OBJJSFDMATRIX = $(subst .$(SrcSuf),.$(ObjSuf),$(SRCJSFDMATRIX))\
		libJSFDMatrix.$(ObjSuf)
#endif

HDRJSF	      = $(subst .$(SrcSuf),.$(HdrSuf),$(SRCJSF)) \
		JSFBasicClasses.h \
		JSFLinkDef.h

HDRJSFLCFULL  = $(subst .$(SrcSuf),.$(HdrSuf),$(SRCJSFLCFULL)) \
		JSFLCFULLLinkDef.h

HDRJSFQUICKSIM= $(subst .$(SrcSuf),.$(HdrSuf),$(SRCJSFQUICKSIM)) \
		JSFQuickSimLinkDef.h

#if __ROOT_FULLVERSION__ < 30000
HDRJSFDMATRIX = $(subst .$(SrcSuf),.$(HdrSuf),$(SRCJSFDMATRIX)) \
		JSFDMatrixLinkDef.h
#endif

HDR	      = $(HDRJSF) $(HDRJSFLCFULL) $(HDRJSFQUICKSIM) \
		$(HDRJSFDMATRIX) $(HDRJSFBASESSPRING)

/*----------------------------------------------------------------------*/
/*  Make targets							*/
/*----------------------------------------------------------------------*/

#if __ROOT_FULLVERSION__ < 30000
all::  libjsf libjsflcfull libjsfquicksim libjsfdmatrix jsf
#else
all::  libjsf libjsflcfull libjsfquicksim jsf
#endif
#if defined(AIXArchitecture)
AIXSOLIBS += -L$(LCLIBDIR) -lGENUTIL -lLUHADR -lTAUOLA \
	-lSIMJLC -lLTKCL -lLCFULL -lBASESV5.1 -lTBS \
	-lHELASV204 -lFORTLIB -lCOM -lCLI \
	$(shell root-config --libs) \
	-lMinuit -lEGPythia -lEG $(CERNLIBS) -lxlf90

libjsf: ../lib/libJSF.$(DllSuf)
../lib/libJSF.$(DllSuf): $(OBJJSF)
	@echo "Linking $@ "
	@rm -f $@
	$(LD) $(SOFLAGS)  $(OBJJSF) -o libJSF.$(DllSuf) $(AIXSOLIBS)
	@mv libJSF.$(DllSuf) ../lib

libjsflcfull: ../lib/libJSFLCFULL.$(DllSuf) 
../lib/libJSFLCFULL.$(DllSuf):   $(OBJJSFLCFULL) $(OBJJSFQUICKSIM)
	@echo "Linking $@ "
	@rm -f $@
	$(LD) $(SOFLAGS)  $(OBJJSFLCFULL) $(OBJJSFQUICKSIM) -o $@ $(AIXSOLIBS) \
	-L$(JSFROOT)/lib  -lBasesSpring -lJSF


libjsfquicksim:     ../lib/libJSFQuickSim.$(DllSuf)
../lib/libJSFQuickSim.$(DllSuf):     $(OBJJSFQUICKSIM)
	ln -fs ../lib/libJSFLCFULL.so ../lib/libJSFQuickSim.so

#else


libjsf: ../lib/libJSF.$(DylibSuf)
../lib/libJSF.$(DylibSuf): $(OBJJSF)
	@echo "Linking $@ "
	$(LD) $(DYLIBFLAGS)  $(OBJJSF) -o libJSF.$(DylibSuf)
	@mv libJSF.$(DylibSuf) ../lib

libjsflcfull: ../lib/libJSFLCFULL.$(DylibSuf) ../lib/libJSFLCFULL.a
../lib/libJSFLCFULL.$(DylibSuf):   $(OBJJSFLCFULL)
	@echo "Linking $@ "
	$(LD) $(DYLIBFLAGS)  $(OBJJSFLCFULL) -o libJSFLCFULL.$(DylibSuf)
	@mv libJSFLCFULL.$(DylibSuf) ../lib

../lib/libJSFLCFULL.a:   $(OBJJSFLCFULL)
	@echo "Linking $@"
	@/bin/rm -f $@
	ar -r $@ $(OBJJSFLCFULL)

libjsfquicksim:     ../lib/libJSFQuickSim.$(DylibSuf) ../lib/libJSFQuickSim.a
../lib/libJSFQuickSim.$(DylibSuf):     $(OBJJSFQUICKSIM)
	@echo "Linking $@"
	$(LD) $(DYLIBFLAGS)  $(OBJJSFQUICKSIM) -o libJSFQuickSim.$(DylibSuf)
	@mv libJSFQuickSim.$(DylibSuf) ../lib

../lib/libJSFQuickSim.a:     $(OBJJSFQUICKSIM)
	@echo "Linking $@"
	@/bin/rm -f $@
	ar -r $@ $(OBJJSFQUICKSIM) 

#if __ROOT_FULLVERSION__ < 30000
libjsfdmatrix: ../lib/libJSFDMatrix.$(DylibSuf)
../lib/libJSFDMatrix.$(DylibSuf): $(OBJJSFDMATRIX)
	@echo "Linking $@"
	$(LD) $(DYLDFLAGS)  $(OBJJSFDMATRIX) -o $@
#endif

#endif


jsf: $(OBJS) jsfmain.o
	$(CXX) jsfmain.o $(BLOCKDATA) \
	$(JSFLIBS) $(LDFLAGS) \
	 -o jsf $(DYLDEXTRALIBS)
	@cp -p jsf ../bin
	@rm -f jsf
	@echo jsf was installed in ../bin/jsf

clean:: 
	@rm -f $(OBJS) core *.so *~
	@rm -f libJSF.$(SrcSuf) libJSF.h
	@rm -f libJSFLCFULL.$(SrcSuf) libJSFLCFULL.h
	@rm -f libJSFQuickSim.$(SrcSuf) libJSFQuickSim.h
	@rm -f libJSFDMatrix.$(SrcSuf) libJSFDMatrix.h

depend:: $(SRC) $(HDR)
	for i in $(SRC); do \
	rmkdepend -a -- $(DEPENDFILES) -- $$i; done

distclean:: clean
	@rm -f $(OBJS) core *~ *.o
	@rm -f PYTHIA.SEED *.bak *.a
	@rm -f jsf *.root Makefile 

web:
	../bin/jsf -q -b html.C


#if defined(AIXArchitecture)

libJSF.$(SrcSuf): $(HDRJSF)
	@echo "Generating dictionary ..."
	@( export LIBPATH=$(LD_LIBRARY_PATH) && \
	rootcint  -f libJSF.$(SrcSuf) -c $(HDRJSF) )

libJSFLCFULL.$(SrcSuf): $(HDRJSFLCFULL)
	@echo "Generating dictionary ..."
	@( export LIBPATH=$(LD_LIBRARY_PATH) && \
	rootcint -f libJSFLCFULL.$(SrcSuf) -c $(HDRJSFLCFULL) )
libJSFQuickSim.$(SrcSuf): $(HDRJSFQUICKSIM)
	@echo "Generating dictionary ..."
	@( export LIBPATH=$(LD_LIBRARY_PATH) && \
	rootcint -f libJSFQuickSim.$(SrcSuf) -c $(HDRJSFQUICKSIM) )

#else

libJSF.$(SrcSuf): $(HDRJSF)
		@echo "Generating dictionary ..."
		rootcint  -f libJSF.$(SrcSuf) -c $(RCINTDEFINES) $(HDRJSF)
libJSFLCFULL.$(SrcSuf): $(HDRJSFLCFULL)
		@echo "Generating dictionary ..."
		rootcint -f libJSFLCFULL.$(SrcSuf) -c $(RCINTDEFINES) $(HDRJSFLCFULL)
libJSFQuickSim.$(SrcSuf): $(HDRJSFQUICKSIM)
		@echo "Generating dictionary ..."
		rootcint -f libJSFQuickSim.$(SrcSuf) -c $(RCINTDEFINES) $(HDRJSFQUICKSIM)

#if __ROOT_FULLVERSION__ < 30000
libJSFDMatrix.$(SrcSuf): $(HDRJSFDMATRIX)
		@echo "Generating dictionary ..."
		rootcint -f libJSFDMatrix.$(SrcSuf) -c $(HDRJSFDMATRIX)
#endif

#endif

JSFConfig.h: ../conf/jsf.version ../bin/makespec
	../bin/makespec 


../lib/libJSFGUI.so:
	( cd $(JSFROOT)/example/guiexam1 ; xmkmf -a ; make )
