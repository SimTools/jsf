#!/jlc/local/bin/wish -f
#
# Aid to build jsf user application
#


#########################################################
# Sub procedures
#########################################################

proc NotAvailable {w} {
    tk_messageBox -icon warning -message \
    "Sorry.\nThis button is not implemented yet." -type ok -parent $w 
}

#########################################################
# Load BasesSpring Parameters
#########################################################

proc ConfBasesSpring {w args} {
  global titlefont
  global incsample

  catch { destroy $w }
  toplevel $w
  wm title $w "Configuration"
  label $w.title -text "Configuration of Bases/Spring modules" -font $titlefont
  pack $w.title -side top -fill x -pady 7

  label $w.mess -text "Initial parameter values are obtained from the configuration file. After updating them,  press Build Program button to save them in thefile whose name is \"spring_class~name.conf\"  and create a sample JSF program." -wraplength 500 -justify left
  pack $w.mess -side top -fill x -pady 8
  frame $w.ruler -relief sunken -bd 2 -height 4
  pack $w.ruler -side top -fill x

  set file [ .conf.entry get ]
  frame $w.conf -bd 0
  label $w.conf.label -width 20 -anchor w -text "Configuration file"
  label $w.conf.labelb -width 60 -anchor w -text $file 
  pack $w.conf.label -side left
  pack $w.conf.labelb -side right
  pack $w.conf -side top -fill x

  # parameter entry

  foreach i { bclass btitle sclass stitle version comment} {
    frame $w.$i -bd 0
    label $w.$i.label -width 20 -anchor w
    entry $w.$i.entry  -relief sunken -width 40 
    pack  $w.$i.label -side left 
    pack  $w.$i.entry  -side left
  }
  $w.bclass.label config -text {Bases class name:} 
  $w.btitle.label config -text {      title :}
  $w.sclass.label config -text {Spring class name:} 
  $w.stitle.label config -text {       title :}
  $w.version.label config -text {Version number  :}
  $w.comment.label config -text {Program comment:}
  pack $w.bclass $w.btitle $w.sclass $w.stitle $w.version \
	  $w.comment -side top -fill x

  frame $w.sample
  label $w.sample.label -text "Include sample code ?" 
  radiobutton $w.sample.yes -text "Yes" -variable incsample \
	  -value yes -relief flat
  radiobutton $w.sample.no -text "No" -variable incsample \
	  -value no -relief flat
  pack $w.sample.label $w.sample.yes $w.sample.no -side left -anchor w
  pack $w.sample

#IncludeSample:  yes
#SampleName:     LLbar


  frame $w.buttons -borderwidth 10
  pack $w.buttons -side top -fill x

  button $w.buttons.load -text "Load Parameter" -command "LoadParam .bs yes"
  button $w.buttons.save -text "Save Parameter" -command "SaveParam .bs yes"
  button $w.buttons.build -text "Build Program" -command "BuildProgram .bs" 
  button $w.buttons.quit -text Dismiss -command "destroy $w"
  pack $w.buttons.save $w.buttons.build -side left
  pack $w.buttons.quit -side right


#  set default parameters
  LoadParam .bs no


}


################################################
#  BuildProgram
################################################
proc BuildProgram { name } {
  global jsfroot
  set cfile [.conf.entry get ]
  switch $name {
    .bs { SaveParam .bs no
         set mess [exec $jsfroot/bin/mkbs -conf $cfile -jsfroot $jsfroot]
        tk_messageBox -icon info -message $mess -type ok -parent .bs }
    }
}

################################################
#  Set the configuration file name
################################################
proc SetFile { } {
  set file [ .conf.entry get ]
    
# If file is not set yet, prompt
    set types {
	{"Text files"	{.conf}	}
	{"All files"	*}
    }
    set file [tk_getOpenFile -filetypes $types -parent . ]
    if ![string compare $file ""] {
      tk_messageBox -icon info -message \
      "Set file name is calceled." -type ok -parent .
      return
    }
    .conf.entry insert 0 $file
}

################################################
#  Load parameters from the fonfiguration file
#  wname = main for parameters in main window
#        = bases for parameters in bases window
################################################

proc LoadParam { w {message yes} } {
  global incsample
  set file [ .conf.entry get ]
    
  if { $file == "" } {
      tk_messageBox -icon error -message \
      "Configuration file is not set yet." -type ok -parent $w
      return
  }
  
#
# Read parameters
#
  set fileId [open $file RDONLY]
  while { [gets $fileId line] >= 0 } {
      set line [ string trimleft $line  ]
      set line [ string trimright $line  ]
      if [ string match #* $line ] continue
      set param [ split $line : ]
      set pname [string trimright [string trimleft [lindex $param 0] ]]
      set pval  [string trimright [string trimleft [lindex $param 1] ]]
      switch $w {
	  . {
	      switch $pname {
		  Date { .date.entry delete 0 end ; \
			  if { $pval == "undefined" } {   \
 		          set pval [ exec date +%d-%B-%Y] }
			 .date.entry insert 0 $pval }
		  Author { .author.entry delete 0 end ; \
			  if { $pval == "undefined" } { \
		                set pval [exec logname] }
			   .author.entry insert 0 $pval }
		  OutputDirectory { .outdir.entry delete 0 end ; \
			            .outdir.entry insert 0 $pval}
		}
	  }
	  .bs {
	      switch $pname {
		  Bases {.bs.bclass.entry delete 0 end ; \
			  .bs.bclass.entry insert 0 $pval }
		  BasesTitle  {.bs.btitle.entry delete 0 end ; \
			        .bs.btitle.entry insert 0 $pval }
		  Spring {.bs.sclass.entry delete 0 end ; \
			  .bs.sclass.entry insert 0 $pval ; }
		  SpringTitle  {.bs.stitle.entry delete 0 end ; \
			        .bs.stitle.entry insert 0 $pval }
		  Version { .bs.version.entry delete 0 end ; \
			    .bs.version.entry insert 0 $pval}
		  Comment { .bs.comment.entry delete 0 end ; \
			    .bs.comment.entry insert 0 $pval}
  	          IncludeSample { set incsample $pval }
	      }
	 }

      }
  }
  close $fileId

  if { $message != "no"} { 
    tk_messageBox -icon info -message \
    "New parameters are obtained from $file." -type ok -parent $w 
  }
}


################################################
#  Save parameters into the configuration file.
#  wname = main for parameters in main window
#        = bases for parameters in bases window
################################################
proc SaveParam { w { message yes } } {
  global incsample

  set file [ .conf.entry get ]
  if { $file == "" } {
    tk_messageBox -icon error -message \
    "Configuration file is not set yet." -type ok -parent $w
    return
  }
#
# Save parameters
#
  set lno 0
  set rline(0) "#  "
  set fileId [open $file RDONLY]

  while { [gets $fileId line] >= 0 } {
      incr lno 1
      set rline($lno) $line
      set line [ string trimleft $line  ]
      set line [ string trimright $line  ]
      if [ string match #* $line ] continue
      set bline  [string trimright [string trimleft $line ]]
      if { $bline == "" } continue 
      set param [ split $line : ]
      set pname [string trimright [string trimleft [lindex $param 0] ]]
      set pval  [string trimright [string trimleft [lindex $param 1] ]]
      switch $w {
	  . {
	      switch $pname {
		  Date { set nval [.date.entry get] ;
  		         set rline($lno) "$pname: \t $nval" }
		  Author { set nval [.author.entry get] ;
  		         set rline($lno) "$pname: \t $nval" }
		  OutputDirectory { set nval [.outdir.entry get] ;
  		         set rline($lno) "$pname: \t $nval" }
		}
	  } 
	  .bs {
	      switch $pname {
		  Bases { set nval [.bs.bclass.entry get] ;
  		         set rline($lno) "$pname: \t $nval" }
		  BasesTitle { set nval [.bs.btitle.entry get] ;
  		         set rline($lno) "$pname: \t $nval" }
		  Spring { set nval [.bs.sclass.entry get] ;
  		         set rline($lno) "$pname: \t $nval" }
		  SpringTitle { set nval [.bs.stitle.entry get] ;
  		         set rline($lno) "$pname: \t $nval" }
		  Version { set nval [.bs.version.entry get] ;
  		         set rline($lno) "$pname: \t $nval" }
		  Comment { set nval [.bs.comment.entry get] ;
  		         set rline($lno) "$pname: \t $nval" }
		 IncludeSample { set rline($lno) "$pname: \t $incsample" }
	      }
	 } 
      } 
  } 
  close $fileId
  set ofileId [open $file {RDWR TRUNC} ]
  for {set i 1 } {$i <= $lno} { incr i 1} {
     puts $ofileId  $rline($i)
  }
  close $ofileId
  unset rline

  if { $message != "no" } {
    tk_messageBox -icon info -message \
    "Parameters are saved in $file." -type ok -parent $w 
  }
}


# #################################
#  Start Main
# #################################


wm title . "JSF application builder"
wm minsize . 300 50



# #################################
# Messages
# #################################
#
global jsfroot
global titlefont
global incsample
set incsample no

set titlefont -*-Helvetica-Bold-R-Normal--*-180-*-*-*-*-*-*
label .header -text "JSF Application Builder" -font $titlefont
label .descript -wraplength 500 -justify left \
-text "This panel will create template files for JSF application.  Set parameters, then press the button for the type of the application.  The files are created in the output directory.  If command is executed without arguments, the JSF default configuration file is used.  If you want to startup with your own configuration file, do \"buildjsf -conf yourfile \", where yourfile is the name of your configuration file."
pack .header -side top 
pack .descript -side top 

#
# #################################
# Entry for JSFROOT and OutputDirectory
# #################################
#

frame .defrule -relief sunken -bd 2 -height 4
pack .defrule -side top -fill x
label .defhead -text "Parameters" -font $titlefont
pack .defhead

#  (1) buttons to set parameter
frame .def
button .def.set -text "Set Default" -command {
    .conf.entry delete 0 end
    .conf.entry insert 0 "build.conf" 
    .jsfroot.entry delete 0 end
    .jsfroot.entry insert 0 "/proj/phys/lclib/jsf" 
    .outdir.entry delete 0 end
    .outdir.entry insert 0 "." 
    .author.entry delete 0 end
    .author.entry insert 0 [ exec logname ]
    .date.entry delete 0 end 
    .date.entry insert 0 [ exec date +%d-%B-%Y]
}
button .def.clr -text "Clear" -command {
    .conf.entry delete 0 end ;
    .jsfroot.entry delete 0 end ;
    .outdir.entry delete 0 end ;
    .author.entry delete 0 end ;
    .date.entry delete 0 end ;
}
button .def.load -text "Load" -command {
    LoadParam . yes
}
button .def.save -text "Save" -command {
    SaveParam . yes
}
pack .def.set -side left 
pack .def.clr -side left
pack .def.load -side left 
pack .def.save -side left 
pack .def -side top

# Make entries
foreach i {conf jsfroot outdir author date} {
  frame .$i -bd 0
  if { $i !=  "conf" }  { label .$i.label -width 20 -anchor w }
  if { $i == "conf" } { button .$i.label -width 20 -anchor w -command SetFile }
  entry .$i.entry  -relief sunken -width 60 
  pack  .$i.label -side left 
  pack  .$i.entry  -side right
}
.conf.label config -text {Configuration file :} 
.jsfroot.label config -text {JSFROOT :}
.outdir.label config -text {Output Directory :}
.author.label config -text {Your Name :}
.date.label config -text {Date :}
pack .conf .jsfroot .outdir .author .date -side top -fill x

set jsfroot "/proj/phys/lclib/jsf"
if { $env(JSFROOT) != "" } { set jsfroot $env(JSFROOT) }
.jsfroot.entry insert 0 "$jsfroot"

# #################################
# Get configuration file name from the argument
# #################################

set iflag ""
foreach arg $argv {
    switch -- $arg {
	-conf { set iflag "conf" }
	-jsfroot { set iflag "jsfroot" }
        default {
	    switch $iflag {
		conf { .conf.entry delete 0 end ; 
		       .conf.entry insert 0 $arg; 
		       set iflag "" }
		jsfroot { .jsfroot.entry delete 0 end ;
		          .jsfroot.entry insert 0 $argv ;
		          set jsfroot $argv ;
		       set iflag "" }
	   }
	}
    }
}

set ftemp [.conf.entry get]
if { $ftemp == "" } {
    if { ![file exists build.conf] } { 
	set cout [exec cp $jsfroot/conf/build.conf  build.conf] 
    }
    .conf.entry insert 0 "build.conf" ;
}

LoadParam . no

#
# #################################
# buttons to build application
# #################################
# 
frame .filesrule -relief sunken -bd 2 -height 4
pack .filesrule -side top -fill x
label .fileshead -text "Build files" -font $titlefont
pack .fileshead 


foreach i { bases sana btest} {
   frame .$i
   label .$i.label -width 20 -anchor w
   button .$i.conf -text "Set Parameters and Build Program" -width 60
   pack .$i.label -side left -fill x
   pack .$i.conf -side right
}
.bases.label config -text {Bases/Spring} 
.bases.conf config -command {ConfBasesSpring .bs conf}

.sana.label config -text {Sim. Data Analysis}
.sana.conf config -command  { NotAvailable . }

.btest.label config -text {Beam test analysis}
.btest.conf config -command  { NotAvailable . }

pack .bases .sana .btest -side top -fill x

#########################################################
# Quit buttons
#########################################################
frame .miscrule -relief sunken -bd 2 -height 4
pack .miscrule -side top -fill x

frame .misc
button .misc.quit -text Quit -command exit
button .misc.help -text Help -command Help
pack .misc.quit -side right -anchor sw
pack .misc.help -side left -anchor se 
pack .misc -side top -fill x -ipady 15 

